import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import "./quiz.css";

const questions = [
  {
    question: "–ö–∞–∫–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –ú–µ–ª–ª—Å—Ç—Ä–æ—è?",
    options: ["–ê–Ω–¥—Ä–µ–π –ë—É—Ä–∏–º", "–í–∞–¥–∏–º –ü–æ–ª–µ", "–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"],
    answer: 0,
  },
  {
    question: "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ú–µ–ª–ª—Å—Ç—Ä–æ–π –Ω–∞—á–∞–ª —Å–≤–æ—é –∫–∞—Ä—å–µ—Ä—É —Å—Ç—Ä–∏–º–µ—Ä–∞?",
    options: ["2015", "2016", "2017", "2018"],
    answer: 0,
  },
  {
    question: "–ö–∞–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å—Ç–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤ –ú–µ–ª–ª—Å—Ç—Ä–æ—è?",
    options: ["Twitch", "YouTube", "Kick", "Trovo"],
    answer: 2,
  },
  {
    question: "–°–∫–æ–ª—å–∫–æ –∑—Ä–∏—Ç–µ–ª–µ–π –±—ã–ª–æ –Ω–∞ —Å—Ç—Ä–∏–º–µ –ú–µ–ª–ª—Å—Ç—Ä–æ—è –≤ –º–∞—Ä—Ç–µ 2024 –≥–æ–¥–∞?",
    options: ["500,000", "600,000", "700,000", "720,000"],
    answer: 3,
  },
  {
    question: "–ö–∞–∫–æ–π —Ä–µ–∫–æ—Ä–¥ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ú–µ–ª–ª—Å—Ç—Ä–æ–π –≤ –º–∞—Ä—Ç–µ 2024 –≥–æ–¥–∞?",
    options: [
      "–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Å—Ç—Ä–∏–º",
      "–ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–º —Å—Ç—Ä–∏–º–µ",
      "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π",
      "–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
    ],
    answer: 1,
  },
];

const facts = [
  "–ú–µ–ª–ª—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–æ–¥–∏–ª —Å—Ç—Ä–∏–º—ã –¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤!",
  "–ü–µ—Ä–≤—ã–π —Å—Ç—Ä–∏–º –±—ã–ª –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Kick.",
  "–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä –∏–≥—Ä –ú–µ–ª–ª—Å—Ç—Ä–æ—è ‚Äî –∫–∏–±–µ—Ä–ø–∞–Ω–∫ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
  "–ú–µ–ª–ª—Å—Ç—Ä–æ–π –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–∏–≤–µ–Ω—Ç—ã.",
  "–ù–∞ –æ–¥–Ω–æ–º –∏–∑ —Å—Ç—Ä–∏–º–æ–≤ –±—ã–ª–æ –±–æ–ª–µ–µ 700,000 –∑—Ä–∏—Ç–µ–ª–µ–π.",
];

const Quiz = () => {
  const [current, setCurrent] = useState(0);
  const [selected, setSelected] = useState(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [fact, setFact] = useState(facts[0]);

  const handleOptionClick = (index) => {
    if (selected !== null) return;
    setSelected(index);

    if (index === questions[current].answer) setScore((s) => s + 1);
    setFact(facts[Math.floor(Math.random() * facts.length)]);

    setTimeout(() => {
      if (current + 1 < questions.length) {
        setCurrent((c) => c + 1);
        setSelected(null);
      } else {
        setShowResult(true);
      }
    }, 1000);
  };

  const q = questions[current];
  const progress = ((current + 1) / questions.length) * 100;

  return (
    <div className="quizContainer">
      <div className="quizHeader">
        <h1>Mellstroy Quiz</h1>
        <div className="quizProgressBar">
          <motion.div
            className="progressFill"
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.4 }}
          />
        </div>
      </div>

      <AnimatePresence mode="wait">
        {!showResult ? (
          <motion.div
            key={current}
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -30 }}
            transition={{ duration: 0.4 }}
            className="quizCard"
          >
            <h2>{q.question}</h2>
            <div className="options">
              {q.options.map((opt, idx) => (
                <motion.button
                  key={idx}
                  className={`option ${
                    selected === idx
                      ? idx === q.answer
                        ? "correct"
                        : "wrong"
                      : ""
                  }`}
                  onClick={() => handleOptionClick(idx)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  {opt}
                </motion.button>
              ))}
            </div>
            <div className="randomFact">
              üí° <em>{fact}</em>
            </div>
          </motion.div>
        ) : (
          <motion.div
            key="result"
            initial={{ opacity: 0, y: -30 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 30 }}
            className="quizResult"
          >
            <h2>
              –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <span>{score}</span> / {questions.length}
            </h2>
            <motion.button
              onClick={() => {
                setCurrent(0);
                setScore(0);
                setSelected(null);
                setShowResult(false);
              }}
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="restartBtn"
            >
              üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </motion.button>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Quiz;
/* import { useState } from "react";
import { motion } from "framer-motion";
import "./quiz.css";

const questions = [
  {
    question: "–ö–∞–∫–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –ú–µ–ª–ª—Å—Ç—Ä–æ—è?",
    options: ["–ê–Ω–¥—Ä–µ–π –ë—É—Ä–∏–º", "–í–∞–¥–∏–º –ü–æ–ª–µ", "–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"],
    answer: 0,
  },
  {
    question: "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ú–µ–ª–ª—Å—Ç—Ä–æ–π –Ω–∞—á–∞–ª —Å–≤–æ—é –∫–∞—Ä—å–µ—Ä—É —Å—Ç—Ä–∏–º–µ—Ä–∞?",
    options: ["2015", "2016", "2017", "2018"],
    answer: 0,
  },
  {
    question: "–ö–∞–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å—Ç–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤ –ú–µ–ª–ª—Å—Ç—Ä–æ—è?",
    options: ["Twitch", "YouTube", "Kick", "Trovo"],
    answer: 2,
  },
  {
    question: "–°–∫–æ–ª—å–∫–æ –∑—Ä–∏—Ç–µ–ª–µ–π –±—ã–ª–æ –Ω–∞ —Å—Ç—Ä–∏–º–µ –ú–µ–ª–ª—Å—Ç—Ä–æ—è –≤ –º–∞—Ä—Ç–µ 2024 –≥–æ–¥–∞?",
    options: ["500,000", "600,000", "700,000", "720,000"],
    answer: 3,
  },
  {
    question: "–ö–∞–∫–æ–π —Ä–µ–∫–æ—Ä–¥ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ú–µ–ª–ª—Å—Ç—Ä–æ–π –≤ –º–∞—Ä—Ç–µ 2024 –≥–æ–¥–∞?",
    options: [
      "–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Å—Ç—Ä–∏–º",
      "–ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–º —Å—Ç—Ä–∏–º–µ",
      "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π",
      "–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
    ],
    answer: 1,
  },
];

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Ñ–∞–∫—Ç–æ–≤!
const facts = [
  "–ú–µ–ª–ª—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–æ–¥–∏–ª —Å—Ç—Ä–∏–º—ã –¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤!",
  "–ü–µ—Ä–≤—ã–π —Å—Ç—Ä–∏–º –±—ã–ª –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Kick.",
  "–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä –∏–≥—Ä –ú–µ–ª–ª—Å—Ç—Ä–æ—è ‚Äî –∫–∏–±–µ—Ä–ø–∞–Ω–∫ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
  "–ú–µ–ª–ª—Å—Ç—Ä–æ–π –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–∏–≤–µ–Ω—Ç—ã.",
  "–ù–∞ –æ–¥–Ω–æ–º –∏–∑ —Å—Ç—Ä–∏–º–æ–≤ –±—ã–ª–æ –±–æ–ª–µ–µ 700,000 –∑—Ä–∏—Ç–µ–ª–µ–π.",
];

const TriviaQuiz = () => {
  const [current, setCurrent] = useState(0);
  const [selected, setSelected] = useState(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [fact, setFact] = useState(facts[0]);

  const handleOptionClick = (index) => {
    if (selected !== null) return;
    setSelected(index);

    if (index === questions[current].answer) {
      setScore(score + 1);
    }

    setFact(facts[Math.floor(Math.random() * facts.length)]);

    setTimeout(() => {
      if (current + 1 < questions.length) {
        setCurrent(current + 1);
        setSelected(null);
      } else {
        setShowResult(true);
      }
    }, 1000);
  };

  if (showResult) {
    return (
      <div className="quizContainer">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="quizResult"
        >
          <h2>
            –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} / {questions.length}
          </h2>
          <button
            onClick={() => {
              setCurrent(0);
              setScore(0);
              setSelected(null);
              setShowResult(false);
            }}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </motion.div>
      </div>
    );
  }

  const q = questions[current];
  const progress = ((current + 1) / questions.length) * 100;

  return (
    <div className="quizContainer">
      <div className="quizProgressBar">
        <motion.div
          className="progressFill"
          initial={{ width: 0 }}
          animate={{ width: `${progress}%` }}
        />
      </div>

      <motion.div
        initial={{ opacity: 0, x: -50 }}
        animate={{ opacity: 1, x: 0 }}
        key={current}
        className="quizCard"
      >
        <h2>{q.question}</h2>
        <div className="options">
          {q.options.map((opt, idx) => (
            <motion.button
              key={idx}
              className={`option ${
                selected === idx ? (idx === q.answer ? "correct" : "wrong") : ""
              }`}
              onClick={() => handleOptionClick(idx)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {opt}
            </motion.button>
          ))}
        </div>
        <div className="randomFact">
          <strong>–§–∞–∫—Ç:</strong> {fact}
        </div>
      </motion.div>
    </div>
  );
};

export default TriviaQuiz;
 */
